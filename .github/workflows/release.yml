name: Create Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get latest tag
      id: get_tag
      run: |
        # Get the latest tag, or use v0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        
        # Extract version number and increment
        VERSION=$(echo $LATEST_TAG | sed 's/v//')
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment patch version
        PATCH=$((PATCH + 1))
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"
        
    - name: Check if release already exists
      id: check_release
      run: |
        if gh release view ${{ steps.get_tag.outputs.new_version }} >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release ${{ steps.get_tag.outputs.new_version }} already exists, skipping..."
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release ${{ steps.get_tag.outputs.new_version }} does not exist, proceeding..."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create release package
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # Create base package directory structure
        mkdir -p sdd-package-base
        
        # Copy common folders to base
        if [ -d "memory" ]; then
          cp -r memory sdd-package-base/
          echo "Copied memory folder"
        fi
        
        if [ -d "scripts" ]; then
          cp -r scripts sdd-package-base/
          echo "Copied scripts folder"
        fi
        
        # Create Claude Code package
        mkdir -p sdd-claude-package
        cp -r sdd-package-base/* sdd-claude-package/
        if [ -d ".claude" ]; then
          cp -r .claude sdd-claude-package/
          echo "Created Claude Code package"
        fi
        
        # Create Gemini CLI package
        mkdir -p sdd-gemini-package
        cp -r sdd-package-base/* sdd-gemini-package/
        if [ -d ".gemini" ]; then
          cp -r .gemini sdd-gemini-package/
          # Move GEMINI.md to root for easier access
          if [ -f "sdd-gemini-package/.gemini/GEMINI.md" ]; then
            mv sdd-gemini-package/.gemini/GEMINI.md sdd-gemini-package/GEMINI.md
            echo "Moved GEMINI.md to root of Gemini package"
          fi
          # Remove empty .gemini folder if it only contained GEMINI.md
          if [ -d "sdd-gemini-package/.gemini" ] && [ -z "$(find sdd-gemini-package/.gemini -type f)" ]; then
            rm -rf sdd-gemini-package/.gemini
            echo "Removed empty .gemini folder"
          fi
          echo "Created Gemini CLI package"
        fi
        
        # Create GitHub Copilot package
        mkdir -p sdd-copilot-package
        cp -r sdd-package-base/* sdd-copilot-package/
        if [ -d ".copilot" ]; then
          mkdir -p sdd-copilot-package/.github
          cp -r .copilot/* sdd-copilot-package/.github/
          echo "Created GitHub Copilot package"
        fi
        
        # Create archive files for each package
        tar -czf sdd-template-claude-${{ steps.get_tag.outputs.new_version }}.tar.gz -C sdd-claude-package .
        cd sdd-claude-package && zip -r ../sdd-template-claude-${{ steps.get_tag.outputs.new_version }}.zip . && cd ..
        
        tar -czf sdd-template-gemini-${{ steps.get_tag.outputs.new_version }}.tar.gz -C sdd-gemini-package .
        cd sdd-gemini-package && zip -r ../sdd-template-gemini-${{ steps.get_tag.outputs.new_version }}.zip . && cd ..
        
        tar -czf sdd-template-copilot-${{ steps.get_tag.outputs.new_version }}.tar.gz -C sdd-copilot-package .
        cd sdd-copilot-package && zip -r ../sdd-template-copilot-${{ steps.get_tag.outputs.new_version }}.zip . && cd ..
        
        # List contents for verification
        echo "Claude package contents:"
        tar -tzf sdd-template-claude-${{ steps.get_tag.outputs.new_version }}.tar.gz | head -10
        echo "Gemini package contents:"
        tar -tzf sdd-template-gemini-${{ steps.get_tag.outputs.new_version }}.tar.gz | head -10
        echo "Copilot package contents:"
        tar -tzf sdd-template-copilot-${{ steps.get_tag.outputs.new_version }}.tar.gz | head -10
        
    - name: Generate release notes
      if: steps.check_release.outputs.exists == 'false'
      id: release_notes
      run: |
        # Get commits since last tag
        LAST_TAG=${{ steps.get_tag.outputs.latest_tag }}
        if [ "$LAST_TAG" = "v0.0.0" ]; then
          COMMITS=$(git log --oneline --pretty=format:"- %s" HEAD~10..HEAD)
        else
          COMMITS=$(git log --oneline --pretty=format:"- %s" $LAST_TAG..HEAD)
        fi
        
        # Create release notes
        cat > release_notes.md << EOF
        # SDD Template ${{ steps.get_tag.outputs.new_version }}
        
        This release contains the core Specification-Driven Development (SDD) framework templates for different AI assistants:
        
        ## 📦 Package Variants
        
        Choose the package that matches your preferred AI coding assistant:
        
        ### Claude Code Package
        - **File**: \`sdd-template-claude-${{ steps.get_tag.outputs.new_version }}.zip\`
        - **Contains**: \`.claude/\` commands, \`memory/\`, \`scripts/\`
        - **Usage**: Use \`/specify\`, \`/plan\`, \`/tasks\` commands in Claude Code
        
        ### Gemini CLI Package  
        - **File**: \`sdd-template-gemini-${{ steps.get_tag.outputs.new_version }}.zip\`
        - **Contains**: \`.gemini/\` commands, \`memory/\`, \`scripts/\`
        - **Usage**: Use \`@specify\`, \`@plan\`, \`@tasks\` commands in Gemini CLI
        
        ### GitHub Copilot Package
        - **File**: \`sdd-template-copilot-${{ steps.get_tag.outputs.new_version }}.zip\`
        - **Contains**: \`.github/\` instructions, \`memory/\`, \`scripts/\`
        - **Usage**: Reference SDD workflows in Copilot Chat/CLI prompts
        
        ## 🚀 Quick Start
        
        1. Download the package for your AI assistant
        2. Extract to your project directory
        3. Follow the setup instructions
        4. Start using SDD commands!
        
        ## 📝 Changes in this release
        $COMMITS
        
        ## 🔧 Requirements
        - Python 3.11+
        - Your chosen AI coding assistant
        - Git
        - GitHub CLI (optional)
        EOF
        
        echo "Generated release notes:"
        cat release_notes.md
        
    - name: Create GitHub Release
      if: steps.check_release.outputs.exists == 'false'
      run: |
        gh release create ${{ steps.get_tag.outputs.new_version }} \
          sdd-template-claude-${{ steps.get_tag.outputs.new_version }}.tar.gz \
          sdd-template-claude-${{ steps.get_tag.outputs.new_version }}.zip \
          sdd-template-gemini-${{ steps.get_tag.outputs.new_version }}.tar.gz \
          sdd-template-gemini-${{ steps.get_tag.outputs.new_version }}.zip \
          sdd-template-copilot-${{ steps.get_tag.outputs.new_version }}.tar.gz \
          sdd-template-copilot-${{ steps.get_tag.outputs.new_version }}.zip \
          --title "SDD Template ${{ steps.get_tag.outputs.new_version }}" \
          --notes-file release_notes.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update version in pyproject.toml
      if: steps.check_release.outputs.exists == 'false'
      run: |
        # Update version in pyproject.toml (remove 'v' prefix for Python versioning)
        VERSION=${{ steps.get_tag.outputs.new_version }}
        PYTHON_VERSION=${VERSION#v}
        
        if [ -f "pyproject.toml" ]; then
          sed -i "s/version = \".*\"/version = \"$PYTHON_VERSION\"/" pyproject.toml
          echo "Updated pyproject.toml version to $PYTHON_VERSION"
        fi
        
    - name: Commit version update
      if: steps.check_release.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add pyproject.toml
          git commit -m "chore: bump version to ${{ steps.get_tag.outputs.new_version }}"
          git push
        fi
